package Wankhede_CE;
import java.util.*;

public class Java_Ass_3_Q4{

    Scanner input = new Scanner(System.in);
    int[] arr = new int[100];
    
    public void insertion_sort()
    {
        System.out.println("Enter Size of array : ");
        int n = input.nextInt();
        
        System.out.println("Enter Elements : ");
        for (int i = 0; i < n; i++)
        {
            arr[i] = input.nextInt();
        }
        
        insertion_sort(arr, n);
    }
    
    private void insertion_sort(int[] arr, int n)
    {
        int i, j, t;
        for (i = 0; i < n; i++)
        {
            j = i;
            while(j > 0 && arr[j - 1] > arr[j])
            {
                t = arr[j];
                arr[j] = arr[j - 1];
                arr[j - 1] = t;
                j--;
            }
        }
        
        System.out.println("\nAfter applying Insertion Sort Array elements.....");
        for(i = 0; i < n; i++)
        {
            System.out.println(arr[i]);
        }
    }
    
    public void selection_sort()
    {
        System.out.println("Enter Size of array : ");
        int n = input.nextInt();
        
        System.out.println("Enter Elements : ");
        for (int i = 0; i < n; i++)
        {
            arr[i] = input.nextInt();
        }
        
        selection_sort(arr, n);
    }
    
    private void selection_sort(int[] arr, int n)
    {
        int i, steps, temp;
        for(steps = 0; steps < n; steps++)
        {
            for(i = steps + 1; i < n; i++)/*To sort in Descending order, change > to <.*/
            {
                if(arr[steps] > arr[i])
                {
                    temp = arr[steps];
                    arr[steps] = arr[i];
                    arr[i] = temp;
                }
            }
        }
        
        System.out.println("\nAfter applying Selection Sort Array elements.....");
        for(i = 0; i < n; i++)
        {
            System.out.println(arr[i]);
        }
    }
        
    public void bubble_sort()
    {
        System.out.println("Enter Size of array : ");
        int n = input.nextInt();
        
        System.out.println("Enter Elements : ");
        for (int i = 0; i < n; i++)
        {
            arr[i] = input.nextInt();
        }
        
        bubble_sort(arr, n);
    }
    
    private void bubble_sort(int[] arr, int n)
    {
        int i, steps, temp;
        for(steps = 0; steps < n - 1; steps++)
        {
            for(i = 0; i < n - steps; i++)
            {
                if(arr[i] > arr[i + 1])     /*To sort Descending order, change >to <.*/
                {
                    temp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = temp;
                }
            }
        }
        
        System.out.println("\nAfter applying Bubble Sort Array elements.....");
        for(i = 0; i < n; i++)
        {
            System.out.println(arr[i]);
        }
    }
    
    public void quick_sort()
    {
        System.out.println("Enter Size of array : ");
        int n = input.nextInt();
        
        System.out.println("Enter Elements : ");
        for (int i = 0; i < n; i++)
        {
            arr[i] = input.nextInt();
        }
        
        int[] back;
        back = quick_sort(arr, 0, n-1);
        
        System.out.println("\nAfter applying Quick Sort Array elements.....");
        for(int i = 0; i < n; i++)
        {
            System.out.println(back[i]);
        }
    }
    
    private int[] quick_sort(int[] arr, int low, int high)
    {
        if (low < high)
        {
            // pi is partitioning index, arr[p]
            // is now at right place
            int pi = partition(arr, low, high);
            // Separately sort elements before
            // partition and after partition
            quick_sort(arr, low, pi - 1);
            quick_sort(arr, pi + 1, high);
        }
        
        return arr;
    }
    
    private static void swap(int[] arr, int i, int j)
    {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    
    private static int partition(int[] arr, int low, int high)
    {
        int pivot = arr[high];
        int i = (low - 1);
        for(int j = low; j <= high - 1; j++)
        {
            if (arr[j] < pivot)
            {
                i++;
                swap(arr, i, j);
            }
        }
        
        swap(arr, i + 1, high);
        return (i + 1);
    }
    
    public void merge_sort()
    {
        System.out.println("Enter Size of array : ");
        int n = input.nextInt();
        
        System.out.println("Enter Elements : ");
        for (int i = 0; i < n; i++)
        {
            arr[i] = input.nextInt();
        }
    
        int[] back;
        back = sort(arr, 0,n-1);

        System.out.println("\nAfter applying Merge Sort Array elements.....");
        for(int i = 0; i < n; i++)
        {
            System.out.println(back[i]);
        }
    }

    private void merge(int[] arr, int low, int mid, int high)
    {
        int n1 = mid - low + 1;
        int n2 = high - mid;
        int[] L = new int[n1];
        int[] R = new int[n2];
        
        for (int i = 0; i < n1; ++i)
            L[i] = arr[low + i];
        
        for (int j = 0; j < n2; ++j)
            R[j] = arr[mid + 1 + j];
        
        int i = 0, j = 0;
        int k = low;
        
        while (i < n1 && j < n2)
        {
            if (L[i] <= R[j])
            {
                arr[k] = L[i];
                i++;
            }
            else
            {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
        
        while (i < n1)
        {
            arr[k] = L[i];
            i++;
            k++;
        }
        
        while (j < n2)
        {
            arr[k] = R[j];
            j++;
            k++;
        }
    }
    
    private int[] sort(int[] arr, int low, int high)
    {
        if (low < high)
        {
            int m =low+ (high-low) / 2;
            sort(arr, low, m);
            sort(arr, m + 1, high);
            merge(arr, low, m, high);
        }
        return arr;
    }
    
    public static void main(String[] args)
    {
        Java_Ass_3_Q4 sort = new Java_Ass_3_Q4();
        Scanner input = new Scanner(System.in);
        while(true)
        {
            System.out.println("1. Insertion Sort");
            System.out.println("2. Selection Sort");
            System.out.println("3. Bubble Sort");
            System.out.println("4. Quick Sort");
            System.out.println("5. Merge Sort");
            System.out.println("0. Exit");
            System.out.println("Enter your choice : ");
            
            String s = input.next();
            char choice = s.charAt(0);
            
            switch (choice)
            {
                case '1' :
                {
                    sort.insertion_sort();
                    break;
                }
                case '2' :
                {
                    sort.selection_sort();
                    break;
                }
                case '3' :
                {
                    sort.bubble_sort();
                    break;
                }
                case '4' :
                {
                    sort.quick_sort();
                    break;
                }
                case '5' :
                 {
                    sort.merge_sort();
                    break;
                }
                case '0' :
                {
                    return;
                }
                default:
                {
                    System.out.println("Enter Correct Choice");
                    break;
                }
            }
        }
    }
    
}
